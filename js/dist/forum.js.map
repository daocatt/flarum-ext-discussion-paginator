{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@gtdxyz/flarum-ext-discussion-paginator/webpack/bootstrap","webpack://@gtdxyz/flarum-ext-discussion-paginator/webpack/runtime/compat get default export","webpack://@gtdxyz/flarum-ext-discussion-paginator/webpack/runtime/define property getters","webpack://@gtdxyz/flarum-ext-discussion-paginator/webpack/runtime/hasOwnProperty shorthand","webpack://@gtdxyz/flarum-ext-discussion-paginator/webpack/runtime/make namespace object","webpack://@gtdxyz/flarum-ext-discussion-paginator/external root \"flarum.core.compat['forum/app']\"","webpack://@gtdxyz/flarum-ext-discussion-paginator/external root \"flarum.core.compat['extend']\"","webpack://@gtdxyz/flarum-ext-discussion-paginator/external root \"flarum.core.compat['common/utils/ItemList']\"","webpack://@gtdxyz/flarum-ext-discussion-paginator/external root \"flarum.core.compat['forum/components/DiscussionPage']\"","webpack://@gtdxyz/flarum-ext-discussion-paginator/external root \"flarum.core.compat['forum/components/DiscussionListItem']\"","webpack://@gtdxyz/flarum-ext-discussion-paginator/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@gtdxyz/flarum-ext-discussion-paginator/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@gtdxyz/flarum-ext-discussion-paginator/external root \"flarum.core.compat['common/Component']\"","webpack://@gtdxyz/flarum-ext-discussion-paginator/external root \"flarum.core.compat['common/components/LoadingPost']\"","webpack://@gtdxyz/flarum-ext-discussion-paginator/external root \"flarum.core.compat['common/components/ReplyPlaceholder']\"","webpack://@gtdxyz/flarum-ext-discussion-paginator/external root \"flarum.core.compat['common/helpers/listItems']\"","webpack://@gtdxyz/flarum-ext-discussion-paginator/./src/forum/components/Paginator.js","webpack://@gtdxyz/flarum-ext-discussion-paginator/./src/forum/components/PostPagination.js","webpack://@gtdxyz/flarum-ext-discussion-paginator/./src/forum/index.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/ItemList'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionListItem'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/LoadingPost'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/ReplyPlaceholder'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/listItems'];","import Component from 'flarum/common/Component';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport listItems from 'flarum/common/helpers/listItems';\n\n/**\n * The `Paginator` component displays the pagination.\n *\n * ### attrs\n *\n * - `stream`\n * - `listCount`\n * - `pageCurrent`\n */\nexport default class Paginator extends Component {\n\n  oninit(vnode) {\n    super.oninit(vnode);\n    this.stream = this.attrs.stream;\n\n    this.perPage = 20;\n    this.perBlock = 5;\n    this.listCount = parseInt(this.attrs.listCount);\n    this.pageCurrent = parseInt(this.attrs.pageCurrent);\n    \n    //every 5 page as a page block\n    this.pageCount = Math.ceil(this.listCount/this.perPage);\n\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n\n    // const items = this.$('.item-pageItem');\n    // Object.keys(items).forEach((e) => {\n      \n    //   items[e].bind('click', this.goToPage.bind(this, 5))\n    // });\n\n  }\n  onupdate(vnode) {\n    super.onupdate(vnode);\n\n  }\n\n  view() {\n    if(this.listCount <= 20){\n      return '';\n    }\n    return (\n      <div className=\"Paginator\">\n        <div className=\"container\">\n          <ul className=\"Paginator-items\">\n            {listItems(this.items().toArray())}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Build an item list for the contents of the discussion hero.\n   *\n   * @return {ItemList<import('mithril').Children>}\n   */\n  items() {\n    const items = new ItemList();\n    \n    var pageCurrent = this.pageCurrent;\n\n    //every 5 page as a page block\n    var pageCount = this.pageCount;\n\n    pageCurrent = pageCurrent > pageCount?pageCount:pageCurrent;\n\n    items.add('firstPage', <span classname={pageCurrent==1 && \"current\"} onclick={this.goToFirst.bind(this)}>&lt;</span>);\n\n    \n\n    let blockCurrent = Math.floor(pageCurrent/this.perBlock);\n    if(pageCurrent === this.perBlock * blockCurrent){\n      blockCurrent--;\n    }\n    \n\n    var i;\n    let starter = blockCurrent*this.perBlock + 1;\n    let maxEnd = (blockCurrent+1)*this.perBlock > pageCount?pageCount:(blockCurrent+1)*this.perBlock;\n\n    if(pageCount-pageCurrent < 5 || pageCount < 11){\n      maxEnd = pageCount;\n    }\n\n    if(maxEnd - starter < 4){\n      starter = starter - (5 - (maxEnd - starter));\n    }\n    if(starter <=5 ){\n      starter = 1;\n    }\n\n    if(pageCurrent > 5 && pageCount > 10){\n      items.add('prevPage', <span className=\"prev\" onclick={this.goToPage.bind(this, starter-1)}>...</span>);\n    }\n\n    let indxPage = 0;\n    for(i = starter;i<=maxEnd;i++) {\n      indxPage = i;\n      items.add(pageCurrent==i ? \"pageItem current pageItem-\"+i : \"pageItem pageItem-\"+i, <span className='item' onclick={this.goToPage.bind(this, indxPage)}>{i}</span>);\n    }\n\n    if(pageCount-pageCurrent > 5 && pageCount>10){\n      items.add('nextPage', <span className=\"next\" onclick={this.goToPage.bind(this, maxEnd+1)}>...</span>);\n    }\n\n    items.add('lastPage', <span className={pageCurrent==pageCount && \"current\"} onclick={this.goToLast.bind(this)}>&gt;</span>);\n\n    return items;\n  }\n\n  syncPromise() {\n    const $container = $('html, body').stop(true);\n    return Promise.all([$container.promise(), this.stream.loadPromise]).then(() => {\n      m.redraw.sync();\n\n      this.stream.paused = false;\n      \n    });\n  }\n\n  goToLast() {\n    return this.goToPage(this.pageCount);\n  }\n\n  goToFirst() {\n    this.pageCurrent = 1;\n    this.stream.goToFirst();\n    this.syncPromise();\n  }\n\n  goToPage(indx) {\n    indx = parseInt(indx);\n    if(indx === 1) {\n      return this.goToFirst();\n    }\n\n    this.pageCurrent = indx;\n\n    // the goToIndex will change the index-number, minus count/2 \n    // so add count/2 to index-number as the parameter\n    // count=20\n    // indexNumber-count/2\n\n    var indexNumber = (indx-1)*this.perPage + this.perPage/2;\n    // console.log(indexNumber);\n    \n    this.stream.goToIndex(indexNumber);\n    this.syncPromise();\n\n    this.attrs.onPageChange(this.pageCurrent);\n  }\n}\n","import app from 'flarum/forum/app';\nimport Component from 'flarum/common/Component';\nimport PostLoading from 'flarum/common/components/LoadingPost';\nimport ReplyPlaceholder from 'flarum/common/components/ReplyPlaceholder';\nimport ItemList from 'flarum/common/utils/ItemList';\nimport Paginator from './Paginator';\n\n/**\n * The `PostStream` component displays an infinitely-scrollable wall of posts in\n * a discussion. Posts that have not loaded will be displayed as placeholders.\n *\n * ### Attrs\n *\n * - `discussion`\n * - `stream`\n * - `targetPost`\n * - `onPositionChange`\n */\nexport default class PostPagination extends Component {\n  oninit(vnode) {\n    super.oninit(vnode);\n\n    this.discussion = this.attrs.discussion;\n    this.stream = this.attrs.stream;\n\n    // this.scrollListener = new ScrollListener(this.onscroll.bind(this));\n  }\n\n  view() {\n    let lastTime;\n\n    // const viewingEnd = this.stream.viewingEnd();\n    const viewingEnd = true;\n\n    const posts = this.stream.posts();\n    const postIds = this.discussion.postIds();\n\n    const postFadeIn = (vnode) => {\n      $(vnode.dom).addClass('fadeIn');\n      // 500 is the duration of the fadeIn CSS animation + 100ms,\n      // so the animation has time to complete\n      setTimeout(() => $(vnode.dom).removeClass('fadeIn'), 500);\n    };\n\n    const items = posts.map((post, i) => {\n      let content;\n      const attrs = { 'data-index': this.stream.visibleStart + i };\n        \n      if (post) {\n        const time = post.createdAt();\n        const PostComponent = app.postComponents[post.contentType()];\n        content = !!PostComponent && <PostComponent post={post} />;\n\n        attrs.key = 'post' + post.id();\n        attrs.oncreate = postFadeIn;\n        attrs['data-time'] = time.toISOString();\n        attrs['data-number'] = post.number();\n        attrs['data-id'] = post.id();\n        attrs['data-type'] = post.contentType();\n\n        // If the post before this one was more than 4 days ago, we will\n        // display a 'time gap' indicating how long it has been in between\n        // the posts.\n        const dt = time - lastTime;\n\n        if (dt > 1000 * 60 * 60 * 24 * 4) {\n          content = [\n            <div className=\"PostStream-timeGap\">\n              <span>{app.translator.trans('core.forum.post_stream.time_lapsed_text', { period: dayjs().add(dt, 'ms').fromNow(true) })}</span>\n            </div>,\n            content,\n          ];\n        }\n\n        lastTime = time;\n      } else {\n        attrs.key = 'post' + postIds[this.stream.visibleStart + i];\n\n        content = <PostLoading />;\n      }\n\n      return (\n        <div className=\"PostStream-item\" {...attrs}>\n          {content}\n        </div>\n      );\n    });\n\n\n    items.push(\n        <div className=\"PostStream-pagination\" key=\"pagination\">\n          <Paginator listCount={this.stream.discussion.attribute('commentCount')} stream={this.stream} onPageChange={this.attrs.onPageChange} pageCurrent=\"1\" ></Paginator>\n        </div>\n    );\n\n    // Allow extensions to add items to the end of the post stream.\n    if (viewingEnd) {\n      items.push(...this.endItems().toArray());\n    }\n\n    // If we're viewing the end of the discussion, the user can reply, and\n    // is not already doing so, then show a 'write a reply' placeholder.\n    if (viewingEnd && (!app.session.user || this.discussion.canReply())) {\n      items.push(\n        <div className=\"PostStream-item\" key=\"reply\" data-index={this.stream.count()} oncreate={postFadeIn}>\n          <ReplyPlaceholder discussion={this.discussion} />\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"PostStream\" role=\"feed\" aria-live=\"off\" aria-busy={this.stream.pagesLoading ? 'true' : 'false'}>\n        {items}\n      </div>\n    );\n  }\n\n  /**\n   * @returns {ItemList<import('mithril').Children>}\n   */\n  endItems() {\n    const items = new ItemList();\n\n    return items;\n  }\n\n  onupdate(vnode) {\n    super.onupdate(vnode);\n  }\n\n  oncreate(vnode) {\n    super.oncreate(vnode);\n  }\n\n}\n","import app from 'flarum/forum/app';\r\nimport { extend, override } from 'flarum/extend';\r\nimport type * as Mithril from 'mithril';\r\nimport ItemList from 'flarum/common/utils/ItemList';\r\n\r\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\r\nimport DiscussionListItem from 'flarum/forum/components/DiscussionListItem';\r\n\r\nimport PostPagination from './components/PostPagination';\r\n\r\napp.initializers.add('gtdxyz-discussion-paginator', () => {\r\n\r\n\r\n  // change Hero position\r\n  // extend(DiscussionPage.prototype, 'view', function (this: DiscussionPage, originalFunc: () => Mithril.Children): Mithril.Children {\r\n  //   if(document.getElementsByClassName('DiscussionPage-discussion').length > 0)\r\n  //   {\r\n  //     if($(document.getElementsByClassName('DiscussionPage-discussion')[0].firstElementChild)?.attr('class').indexOf('Hero') !== -1 ){\r\n  //       // $(document.getElementsByClassName('DiscussionPage-discussion')[0].firstElementChild)?.remove();\r\n  //       m.mount(document.getElementsByClassName('DiscussionPage-discussion')[0].firstElementChild,{view:()=>{return ''}});\r\n  //     }\r\n  //   }\r\n\r\n  //   if(document.getElementsByClassName('PostStream').length>0){\r\n  //     if(document.getElementsByClassName('DiscussionPage-thread').length < 1){\r\n  //       m.mount($('<div class=\"DiscussionPage-thread\"/>').insertBefore('.PostStream')[0], {\r\n  //         view: () => (\r\n  //           this.hero()\r\n  //         ),\r\n  //       });\r\n  //     }\r\n  //   }\r\n  // });\r\n\r\n  override(DiscussionListItem.prototype, 'getJumpTo', function () {\r\n    return 0;\r\n  });\r\n  \r\n  extend(DiscussionPage.prototype, 'sidebarItems', function (items) {\r\n    items.remove('scrubber');\r\n  });\r\n  \r\n  override(DiscussionPage.prototype, 'view', function (this: DiscussionPage, originalFunc: () => Mithril.Children): Mithril.Children {\r\n    \r\n    this.pageChanged = function(pageNumber: number): void {\r\n      const discussion = this.discussion;\r\n  \r\n      if (!discussion) return;\r\n  \r\n      // Construct a URL to this discussion with the updated position, then\r\n      // replace it into the window's history and our own history stack.\r\n      const url = app.route.discussion(discussion, (this.near = pageNumber));\r\n  \r\n      window.history.replaceState(null, document.title, url);\r\n      app.history.push('discussion', discussion.title());\r\n      \r\n      // ignore the lastReadPostNumber\r\n      // If the user hasn't read past here before, then we'll update their read\r\n      // state and redraw.\r\n      // if (app.session.user && endNumber > (discussion.lastReadPostNumber() || 0)) {\r\n      //   discussion.save({ lastReadPostNumber: endNumber });\r\n      //   m.redraw();\r\n      // }\r\n    }\r\n      \r\n    this.mainContent = function(): ItemList<Mithril.Children> {\r\n      const items = new ItemList<Mithril.Children>();\r\n  \r\n      items.add('sidebar', this.sidebar(), 100);\r\n  \r\n      items.add(\r\n        'poststream',\r\n        <div className=\"DiscussionPage-stream\">\r\n          <PostPagination discussion={this.discussion} stream={this.stream} onPageChange={this.pageChanged.bind(this)} />\r\n        </div>,\r\n        10\r\n      );\r\n  \r\n      return items;\r\n    }\r\n\r\n    \r\n\r\n    return originalFunc();\r\n  });\r\n  \r\n});"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","p","setPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","create","constructor","Paginator","_Component","apply","arguments","_proto","oninit","vnode","this","stream","attrs","perPage","perBlock","listCount","parseInt","pageCurrent","pageCount","Math","ceil","oncreate","onupdate","view","m","className","listItems","items","toArray","ItemList","add","classname","onclick","goToFirst","bind","i","blockCurrent","floor","starter","maxEnd","goToPage","indxPage","goToLast","syncPromise","_this","$container","$","stop","Promise","all","promise","loadPromise","then","redraw","sync","paused","indx","indexNumber","goToIndex","onPageChange","Component","PostPagination","discussion","lastTime","posts","postIds","postFadeIn","dom","addClass","setTimeout","removeClass","map","post","content","visibleStart","time","createdAt","PostComponent","app","contentType","id","toISOString","number","dt","trans","period","dayjs","fromNow","PostLoading","assign","push","attribute","endItems","user","canReply","count","ReplyPlaceholder","role","pagesLoading","override","DiscussionListItem","extend","DiscussionPage","remove","originalFunc","pageChanged","pageNumber","url","near","window","history","replaceState","document","title","mainContent","sidebar"],"sourceRoot":""}